/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => AutoFitTabsPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian2 = require("obsidian");

// src/types.ts
var DEFAULT_SETTINGS = {
  minWidth: 40,
  closeButtonWidth: 28,
  leftPadding: 12,
  iconRightMargin: 0,
  closeButtonPadding: 0,
  transitionDuration: 275,
  iconWidth: 20,
  maxWidth: 0
  // 0 means disabled
};

// src/settings.ts
var import_obsidian = require("obsidian");
var AutoFitTabsSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    this.createSettingsUI(containerEl);
  }
  createSettingsUI(container) {
    [
      {
        name: "Close button padding",
        desc: "Space in pixels before close button",
        prop: "closeButtonPadding"
      },
      {
        name: "Transition duration",
        desc: "Duration in milliseconds for smooth transitions",
        prop: "transitionDuration"
      }
    ].forEach(({ name, desc, prop }) => {
      new import_obsidian.Setting(container).setName(name).setDesc(`${desc} (default: ${DEFAULT_SETTINGS[prop]})`).addText((text) => text.setPlaceholder(String(DEFAULT_SETTINGS[prop])).setValue(String(this.plugin.settings[prop])).onChange(async (value) => {
        const numValue = Number(value);
        if (!isNaN(numValue) && numValue >= 0) {
          this.plugin.settings[prop] = numValue;
          this.plugin.updateCSSVariables();
          await this.plugin.saveSettings();
        }
      }));
    });
    this.createSettingsSection(container, "Basic dimensions", [
      {
        name: "Minimum width",
        desc: "Minimum width in pixels for very short titles",
        prop: "minWidth"
      },
      {
        name: "Max width",
        desc: "Maximum width in pixels for tabs (0 to disable)",
        prop: "maxWidth"
      },
      {
        name: "Close button width",
        desc: "Width in pixels for the tab close button",
        prop: "closeButtonWidth"
      },
      {
        name: "Left padding",
        desc: "Padding in pixels before the icon",
        prop: "leftPadding"
      }
    ]);
    this.createSettingsSection(container, "Icons", [
      {
        name: "Icon width",
        desc: "Width in pixels for tab icons",
        prop: "iconWidth"
      },
      {
        name: "Icon right margin",
        desc: "Space in pixels between icon and text",
        prop: "iconRightMargin"
      }
    ]);
  }
  createSettingsSection(container, title, settings) {
    new import_obsidian.Setting(container).setName(title).setHeading();
    settings.forEach(({ name, desc, prop }) => {
      new import_obsidian.Setting(container).setName(name).setDesc(`${desc} (default: ${DEFAULT_SETTINGS[prop]})`).addText((text) => text.setPlaceholder(String(DEFAULT_SETTINGS[prop])).setValue(String(this.plugin.settings[prop])).onChange(async (value) => {
        const numValue = Number(value);
        if (!isNaN(numValue) && numValue >= 0) {
          this.plugin.settings[prop] = numValue;
          await this.plugin.saveSettings();
        }
      }));
    });
  }
};

// src/tabManager.ts
var TabManager = class {
  constructor(plugin) {
    this.tabWidthCache = /* @__PURE__ */ new Map();
    this.observer = null;
    this.iconObserver = null;
    this.measureElement = null;
    this.debounceTimeout = null;
    this.isAdjustmentQueued = false;
    this.isResetting = false;
    this.plugin = plugin;
  }
  initialize() {
    this.setupMeasureElement();
    this.registerEventHandlers();
    setTimeout(() => {
      this.queueHeaderAdjustment();
      this.setupMutationObserver();
      this.setupIconStabilizationObserver();
    }, 300);
  }
  cleanup() {
    this.tabWidthCache.clear();
    if (this.observer)
      this.observer.disconnect();
    if (this.iconObserver)
      this.iconObserver.disconnect();
    if (this.measureElement)
      this.measureElement.remove();
    const tabContainers = document.querySelectorAll(".workspace-split.mod-vertical.mod-root .workspace-tab-header-container-inner");
    tabContainers.forEach((container) => {
      if (container instanceof HTMLElement) {
        container.style.overflowX = "";
        container.style.overflowY = "";
        container.scrollLeft = 0;
      }
    });
    const headers = this.getAllHeaders();
    headers.forEach((header) => {
      header.classList.add("autofit-cleanup");
      header.classList.remove("autofit-tab");
      header.classList.remove("autofit-max-width");
      header.style.removeProperty("--header-width");
      setTimeout(() => {
        header.classList.remove("autofit-cleanup");
      }, this.plugin.settings.transitionDuration);
    });
  }
  setupMeasureElement() {
    this.measureElement = document.createElement("span");
    this.measureElement.className = "autofit-tab-measure";
    document.body.appendChild(this.measureElement);
  }
  setupMutationObserver() {
    const tabContainers = document.querySelectorAll(".workspace-split.mod-vertical.mod-root .workspace-tab-header-container");
    if (!tabContainers || tabContainers.length === 0) {
      return;
    }
    this.observer = new MutationObserver((mutations) => {
      for (const mutation of mutations) {
        if (mutation.target && mutation.target instanceof Element) {
          if (!mutation.target.closest(".workspace-split.mod-vertical.mod-root")) {
            continue;
          }
          const isTabElement = mutation.target.closest(".workspace-split.mod-vertical.mod-root .workspace-tab-header") || mutation.target.classList.contains("workspace-tab-header-inner-title") && mutation.target.closest(".workspace-split.mod-vertical.mod-root");
          if (isTabElement) {
            this.queueHeaderAdjustment();
            return;
          }
          if (mutation.target === document.body && mutation.type === "attributes" && mutation.attributeName === "class") {
            this.tabWidthCache.clear();
            this.queueHeaderAdjustment();
            return;
          }
        }
      }
    });
    document.querySelectorAll(".workspace-split.mod-vertical.mod-root .workspace-tab-header-container").forEach((container) => {
      if (this.observer) {
        this.observer.observe(container, {
          childList: true,
          subtree: true,
          attributes: false,
          characterData: true
        });
      }
    });
    if (this.observer) {
      this.observer.observe(document.body, {
        attributes: true,
        attributeFilter: ["class"]
      });
    }
  }
  setupIconStabilizationObserver() {
    this.iconObserver = new MutationObserver((mutations) => {
      for (const mutation of mutations) {
        if (mutation.type === "childList" && mutation.target instanceof Element && mutation.target.classList.contains("workspace-tab-header-inner-icon")) {
          const parentTab = mutation.target.closest(".workspace-tab-header");
          if (parentTab && !parentTab.classList.contains("is-active")) {
            parentTab.classList.add("icon-transition");
            setTimeout(() => {
              if (parentTab) {
                parentTab.classList.remove("icon-transition");
              }
            }, this.plugin.settings.transitionDuration);
          }
        }
      }
    });
    document.querySelectorAll(".workspace-split.mod-vertical.mod-root").forEach((root) => {
      if (this.iconObserver) {
        this.iconObserver.observe(root, {
          childList: true,
          subtree: true
        });
      }
    });
  }
  registerEventHandlers() {
    this.plugin.registerEvent(
      this.plugin.app.workspace.on("layout-change", () => {
        this.debounceLayoutChange();
      })
    );
    this.plugin.registerEvent(
      this.plugin.app.workspace.on("file-open", this.handleFileOpen.bind(this))
    );
    this.plugin.registerEvent(
      this.plugin.app.vault.on("rename", () => {
        this.queueHeaderAdjustment();
      })
    );
    document.body.addEventListener("click", this.handleTabClick.bind(this));
    this.plugin.register(() => document.body.removeEventListener("click", this.handleTabClick.bind(this)));
  }
  debounceLayoutChange() {
    if (this.debounceTimeout) {
      window.clearTimeout(this.debounceTimeout);
    }
    this.debounceTimeout = window.setTimeout(() => {
      this.queueHeaderAdjustment();
      this.debounceTimeout = null;
    }, 100);
  }
  handleTabClick(event) {
    const target = event.target;
    const tabHeader = target == null ? void 0 : target.closest(".workspace-split.mod-vertical.mod-root .workspace-tab-header");
    if (!tabHeader) {
      return;
    }
    if (tabHeader instanceof HTMLElement) {
      setTimeout(() => {
        if (tabHeader.classList.contains("is-active")) {
          this.scrollToActiveTab(tabHeader);
        }
      }, 50);
    }
  }
  handleFileOpen() {
    const activeHeaders = document.querySelectorAll(".workspace-split.mod-vertical.mod-root .workspace-tab-header.is-active");
    activeHeaders.forEach((header) => {
      if (header instanceof HTMLElement) {
        this.stabilizeIcon(header);
        setTimeout(() => {
          if (!this.tabWidthCache.has(this.getHeaderKey(header))) {
            this.queueHeaderAdjustment();
          }
          this.scrollToActiveTab(header);
        }, 50);
      }
    });
  }
  stabilizeIcon(header) {
    const iconElement = header.querySelector(".workspace-tab-header-inner-icon");
    if (iconElement) {
      iconElement.classList.add("stable-icon");
      const currentIconHTML = iconElement.innerHTML;
      const iconObserver = new MutationObserver(() => {
        if (iconElement.innerHTML !== currentIconHTML) {
          iconElement.innerHTML = currentIconHTML;
        }
      });
      iconObserver.observe(iconElement, { childList: true, subtree: true });
      setTimeout(() => {
        iconObserver.disconnect();
        iconElement.classList.remove("stable-icon");
      }, this.plugin.settings.transitionDuration + 50);
    }
  }
  preserveAllIcons() {
    const headers = this.getAllHeaders();
    headers.forEach((header) => {
      const iconElement = header.querySelector(".workspace-tab-header-inner-icon");
      if (iconElement instanceof HTMLElement) {
        iconElement.style.pointerEvents = "none";
      }
    });
  }
  scrollToActiveTab(activeTab) {
    if (!activeTab.closest(".workspace-split.mod-vertical.mod-root")) {
      return;
    }
    const container = activeTab.closest(".workspace-tab-header-container-inner");
    if (container instanceof HTMLElement) {
      const tabRect = activeTab.getBoundingClientRect();
      const containerRect = container.getBoundingClientRect();
      const tabLeft = activeTab.offsetLeft;
      const tabRight = tabLeft + tabRect.width;
      const containerLeft = container.scrollLeft;
      const containerRight = containerLeft + containerRect.width;
      if (tabLeft < containerLeft || tabRight > containerRight) {
        const targetScroll = tabLeft + tabRect.width / 2 - containerRect.width / 2;
        this.smoothScrollTo(container, container.scrollLeft, Math.max(0, targetScroll), 300);
      }
    }
  }
  smoothScrollTo(element, start, end, duration) {
    const startTime = performance.now();
    const easeInOutQuad = (t) => {
      return t < 0.5 ? 2 * t * t : 1 - Math.pow(-2 * t + 2, 2) / 2;
    };
    const animateScroll = (currentTime) => {
      const elapsedTime = currentTime - startTime;
      const progress = Math.min(elapsedTime / duration, 1);
      const easedProgress = easeInOutQuad(progress);
      const scrollValue = start + (end - start) * easedProgress;
      element.scrollLeft = scrollValue;
      if (progress < 1) {
        requestAnimationFrame(animateScroll);
      }
    };
    requestAnimationFrame(animateScroll);
  }
  queueHeaderAdjustment() {
    if (!this.isAdjustmentQueued) {
      this.isAdjustmentQueued = true;
      requestAnimationFrame(() => {
        this.adjustAllHeaders();
        this.isAdjustmentQueued = false;
      });
    }
  }
  getAllHeaders() {
    return Array.from(document.querySelectorAll(
      ".workspace-split.mod-vertical.mod-root .workspace-tab-header"
    ));
  }
  getHeaderKey(header) {
    const titleElement = header.querySelector(".workspace-tab-header-inner-title");
    return (titleElement == null ? void 0 : titleElement.textContent) || "";
  }
  measureTextWidth(text, element) {
    if (!this.measureElement)
      return 0;
    const styles = window.getComputedStyle(element);
    this.measureElement.style.font = styles.font;
    this.measureElement.style.letterSpacing = styles.letterSpacing;
    this.measureElement.style.textTransform = styles.textTransform;
    this.measureElement.style.fontWeight = styles.fontWeight;
    this.measureElement.textContent = text;
    return Math.ceil(this.measureElement.offsetWidth) + 5;
  }
  calculateHeaderWidth(header) {
    const titleElement = header.querySelector(".workspace-tab-header-inner-title");
    if (!titleElement)
      return this.plugin.settings.minWidth;
    const textWidth = this.measureTextWidth(
      titleElement.textContent || "",
      titleElement
    );
    const iconSpaceNeeded = this.plugin.settings.iconWidth > 0 ? this.plugin.settings.iconWidth : 0;
    const calculatedWidth = Math.ceil(Math.max(
      this.plugin.settings.leftPadding + iconSpaceNeeded + this.plugin.settings.iconRightMargin + textWidth + this.plugin.settings.closeButtonPadding + this.plugin.settings.closeButtonWidth,
      this.plugin.settings.minWidth
    ));
    if (this.plugin.settings.maxWidth > 0) {
      return Math.min(calculatedWidth, this.plugin.settings.maxWidth);
    }
    return calculatedWidth;
  }
  adjustAllHeaders() {
    if (this.isResetting)
      return;
    const headers = this.getAllHeaders().filter((header) => {
      const container = header.closest(".workspace-tab-header-container");
      const isVisible = container && window.getComputedStyle(container).display !== "none";
      const isNotLoading = !header.classList.contains("icon-loading");
      return isVisible && isNotLoading;
    });
    const newCache = /* @__PURE__ */ new Map();
    let activeHeader = null;
    headers.forEach((header) => {
      const headerKey = this.getHeaderKey(header);
      const iconElement = header.querySelector(".workspace-tab-header-inner-icon");
      if (iconElement instanceof HTMLElement) {
        iconElement.style.pointerEvents = "none";
        iconElement.style.transform = "translateZ(0)";
      }
      let width = this.tabWidthCache.get(headerKey);
      if (width === void 0 || header.classList.contains("is-active")) {
        width = this.calculateHeaderWidth(header);
      }
      header.classList.add("autofit-tab");
      header.style.setProperty("--header-width", `${width}px`);
      newCache.set(headerKey, width);
      if (this.plugin.settings.maxWidth > 0 && width >= this.plugin.settings.maxWidth) {
        header.classList.add("autofit-max-width");
        width = Math.min(width, this.plugin.settings.maxWidth + 20);
        header.style.setProperty("--header-width", `${width}px`);
      } else {
        header.classList.remove("autofit-max-width");
      }
      if (header.classList.contains("is-active")) {
        activeHeader = header;
      }
    });
    this.tabWidthCache = newCache;
    if (activeHeader) {
      this.scrollToActiveTab(activeHeader);
    }
  }
  resetTabs(isMaxWidthChanged) {
    this.isResetting = true;
    const headers = this.getAllHeaders();
    headers.forEach((header) => {
      header.classList.remove("autofit-max-width");
      header.classList.remove("autofit-tab");
      header.classList.add("autofit-cleanup");
      header.style.removeProperty("--header-width");
    });
    this.tabWidthCache.clear();
    setTimeout(() => {
      headers.forEach((header) => {
        header.classList.remove("autofit-cleanup");
      });
      setTimeout(() => {
        headers.forEach((header) => {
          header.classList.add("autofit-tab");
        });
        this.adjustAllHeaders();
        this.isResetting = false;
      }, 50);
    }, 100);
  }
};

// src/main.ts
var AutoFitTabsPlugin = class extends import_obsidian2.Plugin {
  async onload() {
    await this.loadSettings();
    this.addSettingTab(new AutoFitTabsSettingTab(this.app, this));
    this.tabManager = new TabManager(this);
    this.updateCSSVariables();
    this.tabManager.initialize();
  }
  onunload() {
    this.tabManager.cleanup();
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  updateCSSVariables() {
    const cssVars = {
      "--autofit-min-width": `${this.settings.minWidth}px`,
      "--autofit-close-button-width": `${this.settings.closeButtonWidth}px`,
      "--autofit-left-padding": `${this.settings.leftPadding}px`,
      "--autofit-icon-right-margin": `${this.settings.iconRightMargin}px`,
      "--autofit-close-button-padding": `${this.settings.closeButtonPadding}px`,
      "--autofit-transition-duration": `${this.settings.transitionDuration}ms`,
      "--autofit-icon-width": `${this.settings.iconWidth}px`,
      "--autofit-icon-display": this.settings.iconWidth > 0 ? "flex" : "none",
      // Hide icon completely when width is 0
      "--autofit-max-width": this.settings.maxWidth > 0 ? `${this.settings.maxWidth}px` : "none"
    };
    Object.entries(cssVars).forEach(([property, value]) => {
      document.documentElement.style.setProperty(property, value);
    });
  }
  async saveSettings() {
    const previousMaxWidth = this.settings.maxWidth;
    await this.saveData(this.settings);
    this.updateCSSVariables();
    const isMaxWidthChanged = previousMaxWidth > 0 && this.settings.maxWidth === 0;
    if (isMaxWidthChanged) {
      this.tabManager.resetTabs(isMaxWidthChanged);
    } else {
      this.tabManager.queueHeaderAdjustment();
    }
  }
};
//# sourceMappingURL=data:application/json;base64,
